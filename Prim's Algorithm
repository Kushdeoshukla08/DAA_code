#include <iostream>
#include <vector>
#include <fstream>
#include <queue>
#include <climits>

using namespace std;

void primMST(const vector<vector<int>>& adjMatrix) {
    int V = adjMatrix.size();
    vector<int> key(V, INT_MAX);       
    vector<int> parent(V, -1);        
    vector<bool> inMST(V, false);      

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    key[0] = 0;
    pq.push({0, 0});               

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        inMST[u] = true;

        for (int v = 0; v < V; v++) {
            if (adjMatrix[u][v] && !inMST[v] && adjMatrix[u][v] < key[v]) {
                key[v] = adjMatrix[u][v];
                pq.push({key[v], v});
                parent[v] = u;
            }
        }
    }

    cout << "Prim's MST:" << endl;
    int totalWeight = 0;
    for (int i = 1; i < V; i++) {
        if (parent[i] != -1) {
            cout << "Edge (" << parent[i] << " - " << i << ") with weight " << adjMatrix[parent[i]][i] << endl;
            totalWeight += adjMatrix[parent[i]][i];
        }
    }
    cout << "Total weight of MST: " << totalWeight << endl;
}

void loadGraphAndRunPrim(const string& filename) {
    ifstream file(filename);
    if (!file) {
        cerr << "Unable to open file " << filename << endl;
        return;
    }

    int V;
    file >> V;

    vector<vector<int>> adjMatrix(V, vector<int>(V));
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            file >> adjMatrix[i][j];

    file.close();

    primMST(adjMatrix);
}

int main() {
    string filename = "graph.txt";
    loadGraphAndRunPrim(filename);
    return 0;
}
